import streamlit as st
import requests
import pandas as pd
import matplotlib.pyplot as plt
import folium
from streamlit_folium import st_folium
import math

st.set_page_config(layout="wide")
st.title("‚òÄÔ∏è –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —Å–æ–ª–Ω–µ—á–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å –∫–∞—Ä—Ç–æ–π –∏ –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–µ–π")

# ===== –í–≤–æ–¥ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç —Å –≤—ã—Å–æ–∫–æ–π —Ç–æ—á–Ω–æ—Å—Ç—å—é =====
st.sidebar.header("üìç –õ–æ–∫–∞—Ü–∏—è –∏ –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—è –ø–∞–Ω–µ–ª–µ–π")
lat = st.sidebar.number_input("–®–∏—Ä–æ—Ç–∞", value=50.450000, format="%.6f")
lon = st.sidebar.number_input("–î–æ–ª–≥–æ—Ç–∞", value=30.523333, format="%.6f")

# –°—Ç–æ—Ä–æ–Ω—ã —Å–≤–µ—Ç–∞ (8 –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π)
directions = {
    "–°–µ–≤–µ—Ä": 0,
    "–°–µ–≤–µ—Ä–æ-–í–æ—Å—Ç–æ–∫": 45,
    "–í–æ—Å—Ç–æ–∫": 90,
    "–Æ–≥–æ-–í–æ—Å—Ç–æ–∫": 135,
    "–Æ–≥": 180,
    "–Æ–≥–æ-–ó–∞–ø–∞–¥": 225,
    "–ó–∞–ø–∞–¥": 270,
    "–°–µ–≤–µ—Ä–æ-–ó–∞–ø–∞–¥": 315
}
direction = st.sidebar.radio("–û—Ä–∏–µ–Ω—Ç–∞—Ü–∏—è –ø–∞–Ω–µ–ª–∏:", list(directions.keys()))
azimuth = directions[direction]  # —É–≥–æ–ª –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–∞–Ω–µ–ª–∏ –¥–ª—è PVGIS

# ===== –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–∞–Ω–µ–ª–∏ =====
st.header("‚ö° –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–∞–Ω–µ–ª–∏")
peak_power = st.number_input("–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –º–æ—â–Ω–æ—Å—Ç—å —Å–∏—Å—Ç–µ–º—ã (–∫–í—Ç)", value=5.0)
tilt = st.slider("–£–≥–æ–ª –Ω–∞–∫–ª–æ–Ω–∞ –ø–∞–Ω–µ–ª–∏ (¬∞)", 0, 90, 30)

# ===== –ó–∞–ø—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö PVGIS —Å —É—á–µ—Ç–æ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–∞–Ω–µ–ª–∏ =====
@st.cache_data(show_spinner=True)
def get_pvgis_data(lat, lon, tilt, peak_power, azimuth):
    url = (
        f"https://re.jrc.ec.europa.eu/api/PVcalc?"
        f"lat={lat}&lon={lon}&peakpower={peak_power}&loss=14&angle={tilt}&azimuth={azimuth}&outputformat=json"
    )
    response = requests.get(url)
    if response.status_code == 200:
        return response.json()
    return None

data = get_pvgis_data(lat, lon, tilt, peak_power, azimuth)

def parse_pvgis_data(data):
    if not data or "outputs" not in data:
        return None
    monthly = data["outputs"]["monthly"]["fixed"]
    df = pd.DataFrame(monthly)
    df["month"] = [
        "–Ø–Ω–≤","–§–µ–≤","–ú–∞—Ä","–ê–ø—Ä","–ú–∞–π","–ò—é–Ω",
        "–ò—é–ª","–ê–≤–≥","–°–µ–Ω","–û–∫—Ç","–ù–æ—è","–î–µ–∫"
    ]
    return df[["month","E_m","H(i)_m","SD_m"]]

df = parse_pvgis_data(data)

# ===== –í—ã–≤–æ–¥ —Ç–∞–±–ª–∏—Ü—ã –∏ –≥—Ä–∞—Ñ–∏–∫–∞ =====
if df is not None:
    st.subheader("üìä –°–æ–ª–Ω–µ—á–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ –º–µ—Å—è—Ü–∞–º")
    st.dataframe(df)

    fig, ax = plt.subplots()
    ax.bar(df["month"], df["E_m"], color="orange")
    ax.set_ylabel("–í—ã—Ä–∞–±–æ—Ç–∫–∞ (–∫–í—Ç¬∑—á/–º–µ—Å)")
    ax.set_title("–°–æ–ª–Ω–µ—á–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Å —É—á—ë—Ç–æ–º –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–∏ –∏ –Ω–∞–∫–ª–æ–Ω–∞")
    st.pyplot(fig)

    total = df["E_m"].sum()
    st.success(f"üåû –û–±—â–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞ –≥–æ–¥: **{total:.1f} –∫–í—Ç¬∑—á**")
else:
    st.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ—Ç PVGIS")

# ===== –ö–∞—Ä—Ç–∞ —Å –º–∞—Ä–∫–µ—Ä–æ–º –∏ —Å—Ç—Ä–µ–ª–∫–æ–π –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è =====
st.subheader("üó∫Ô∏è –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–∞–Ω–µ–ª–∏")

angle_deg = azimuth
angle_rad = math.radians(angle_deg)

# —Å–º–µ—â–µ–Ω–∏–µ —Å—Ç—Ä–µ–ª–∫–∏ (~100 –º), —Å —Ç–æ—á–Ω–æ—Å—Ç—å—é –¥–æ 6 –∑–Ω–∞–∫–æ–≤
lat_offset = round(0.001 * math.cos(angle_rad), 6)
lon_offset = round(0.001 * math.sin(angle_rad), 6)

# —Å–æ–∑–¥–∞—ë–º –∫–∞—Ä—Ç—É
m = folium.Map(location=[lat, lon], zoom_start=15)

# —Ç–æ—á–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏
folium.Marker(
    [lat, lon],
    tooltip="–ú–µ—Å—Ç–æ —É—Å—Ç–∞–Ω–æ–≤–∫–∏",
    icon=folium.Icon(color="blue", icon="home")
).add_to(m)

# —Å—Ç—Ä–µ–ª–∫–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–∞–Ω–µ–ª–∏
folium.PolyLine(
    locations=[[lat, lon], [lat + lat_offset, lon + lon_offset]],
    color="red",
    weight=5,
    tooltip=f"–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {direction}"
).add_to(m)

st_folium(m, width=700, height=500)
