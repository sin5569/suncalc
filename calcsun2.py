import streamlit as st
import requests
import pandas as pd
import matplotlib.pyplot as plt
import folium
from streamlit_folium import st_folium
import math
import time
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(layout="wide", page_title="‚òÄÔ∏è –°–æ–ª–Ω–µ—á–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è")
st.title("‚òÄÔ∏è –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —Å–æ–ª–Ω–µ—á–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏")

# ===== –ö–≠–®–ò–†–û–í–ê–ù–ò–ï –î–ê–ù–ù–´–• =====
@st.cache_data(ttl=3600)  # –ö—ç—à –Ω–∞ 1 —á–∞—Å
def get_pvgis_data(lat, lon, tilt, peak_power, azimuth):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ—Ç PVGIS API —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
    url = (
        f"https://re.jrc.ec.europa.eu/api/PVcalc?"
        f"lat={lat}&lon={lon}&peakpower={peak_power}&loss=14&angle={tilt}&azimuth={azimuth}&outputformat=json"
    )
    try:
        response = requests.get(url, timeout=15)
        if response.status_code == 200:
            return response.json()
        else:
            st.error(f"–û—à–∏–±–∫–∞ PVGIS API: {response.status_code}")
            return None
    except requests.exceptions.RequestException as e:
        st.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ PVGIS: {e}")
        return None

# ===== –°–ò–î–ï–ë–ê–† - –ü–ê–†–ê–ú–ï–¢–†–´ –°–ò–°–¢–ï–ú–´ =====
st.sidebar.header("üìç –õ–æ–∫–∞—Ü–∏—è –∏ –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—è –ø–∞–Ω–µ–ª–µ–π")

# –ë—ã—Å—Ç—Ä—ã–π –≤—ã–±–æ—Ä –≥–æ—Ä–æ–¥–æ–≤
cities = {
    "–ú–æ—Å–∫–≤–∞": (55.7558, 37.6173),
    "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥": (59.9343, 30.3351),
    "–ö–∏–µ–≤": (50.4500, 30.5233),
    "–°–æ—á–∏": (43.5855, 39.7231),
    "–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫": (55.0084, 82.9357)
}

selected_city = st.sidebar.selectbox("–ë—ã—Å—Ç—Ä—ã–π –≤—ã–±–æ—Ä –≥–æ—Ä–æ–¥–∞:", list(cities.keys()))
city_lat, city_lon = cities[selected_city]

# –¢–æ—á–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
col1, col2 = st.sidebar.columns(2)
with col1:
    lat = st.number_input("–®–∏—Ä–æ—Ç–∞", value=city_lat, format="%.6f", key="lat")
with col2:
    lon = st.number_input("–î–æ–ª–≥–æ—Ç–∞", value=city_lon, format="%.6f", key="lon")

# –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–∞–Ω–µ–ª–µ–π
directions = {
    "–°–µ–≤–µ—Ä": 180,
    "–°–µ–≤–µ—Ä–æ-–í–æ—Å—Ç–æ–∫": 135,
    "–í–æ—Å—Ç–æ–∫": 270,
    "–Æ–≥–æ-–í–æ—Å—Ç–æ–∫": 315,
    "–Æ–≥": 0,
    "–Æ–≥–æ-–ó–∞–ø–∞–¥": 45,
    "–ó–∞–ø–∞–¥": 90,
    "–°–µ–≤–µ—Ä–æ-–ó–∞–ø–∞–¥": 225
}

direction = st.sidebar.selectbox("–û—Ä–∏–µ–Ω—Ç–∞—Ü–∏—è –ø–∞–Ω–µ–ª–∏:", list(directions.keys()))
azimuth = directions[direction]

# –£–≥–æ–ª –Ω–∞–∫–ª–æ–Ω–∞ —Å –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–∫–∞–º–∏
tilt_presets = {
    "–û–ø—Ç–∏–º–∞–ª—å–Ω—ã–π (—à–∏—Ä–æ—Ç–∞)": round(lat),
    "–ü–ª–æ—Å–∫–∞—è (0¬∞)": 0,
    "–ü–æ–ª–æ–≥–∞—è (15¬∞)": 15,
    "–°—Ä–µ–¥–Ω—è—è (30¬∞)": 30,
    "–ö—Ä—É—Ç–∞—è (45¬∞)": 45,
    "–í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–∞—è (90¬∞)": 90
}

tilt_preset = st.sidebar.selectbox("–ü—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∫–ª–æ–Ω–∞:", list(tilt_presets.keys()))
tilt = st.sidebar.slider("–¢–æ—á–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —É–≥–ª–∞ –Ω–∞–∫–ª–æ–Ω–∞ (¬∞)", 0, 90, tilt_presets[tilt_preset])

# –ú–æ—â–Ω–æ—Å—Ç—å —Å–∏—Å—Ç–µ–º—ã
peak_power = st.sidebar.slider("–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –º–æ—â–Ω–æ—Å—Ç—å —Å–∏—Å—Ç–µ–º—ã (–∫–í—Ç)", 1.0, 100.0, 5.0, 0.1)

# ===== –ò–ù–î–ò–ö–ê–¢–û–† –ó–ê–ì–†–£–ó–ö–ò =====
with st.spinner("–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ—Ç PVGIS..."):
    data = get_pvgis_data(lat, lon, tilt, peak_power, azimuth)

# ===== –û–ë–†–ê–ë–û–¢–ö–ê –î–ê–ù–ù–´–• =====
def parse_pvgis_data(data):
    """–ü–∞—Ä—Å–∏–Ω–≥ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö PVGIS"""
    if not data or "outputs" not in data:
        return None
    
    monthly = data["outputs"]["monthly"]["fixed"]
    df = pd.DataFrame(monthly)
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ä—É—Å—Å–∫–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –º–µ—Å—è—Ü–µ–≤
    months_ru = ["–Ø–Ω–≤", "–§–µ–≤", "–ú–∞—Ä", "–ê–ø—Ä", "–ú–∞–π", "–ò—é–Ω", 
                "–ò—é–ª", "–ê–≤–≥", "–°–µ–Ω", "–û–∫—Ç", "–ù–æ—è", "–î–µ–∫"]
    df["month"] = months_ru
    
    # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è –ø–æ–Ω—è—Ç–Ω–æ—Å—Ç–∏
    df = df.rename(columns={
        "E_m": "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è_–∫–í—Ç—á",
        "H(i)_m": "–°–æ–ª–Ω–µ—á–Ω–∞—è_—Ä–∞–¥–∏–∞—Ü–∏—è",
        "SD_m": "–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ_–æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ"
    })
    
    return df

df = parse_pvgis_data(data)

# ===== –û–°–ù–û–í–ù–û–ô –ò–ù–¢–ï–†–§–ï–ô–° =====
if df is not None:
    # ===== –ö–ê–†–¢–ê =====
    st.subheader("üó∫Ô∏è –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–∞–Ω–µ–ª–∏")
    
    # –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç—É
    m = folium.Map(location=[lat, lon], zoom_start=15)
    
    # –†–∞—Å—á–µ—Ç –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—Ç—Ä–µ–ª–∫–∏
    angle_rad = math.radians(azimuth)
    lat_offset = round(0.001 * math.cos(angle_rad), 6)
    lon_offset = round(0.001 * math.sin(angle_rad), 6)
    
    # –ú–∞—Ä–∫–µ—Ä —É—Å—Ç–∞–Ω–æ–≤–∫–∏
    folium.Marker(
        [lat, lon],
        tooltip=f"–£—Å—Ç–∞–Ω–æ–≤–∫–∞: {direction}, {tilt}¬∞",
        popup=f"–ú–æ—â–Ω–æ—Å—Ç—å: {peak_power} –∫–í—Ç",
        icon=folium.Icon(color="blue", icon="sun", prefix="fa")
    ).add_to(m)
    
    # –°—Ç—Ä–µ–ª–∫–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    folium.PolyLine(
        locations=[[lat, lon], [lat + lat_offset, lon + lon_offset]],
        color="red",
        weight=4,
        tooltip=f"–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {direction}",
        opacity=0.8
    ).add_to(m)
    
    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∫–∞—Ä—Ç—É
    st_folium(m, width=800, height=400)
    
    # ===== –°–í–û–î–ö–ê –ü–û–ö–ê–ó–ê–¢–ï–õ–ï–ô =====
    st.subheader("üìä –°–≤–æ–¥–∫–∞ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π")
    
    total_generation = df["–ì–µ–Ω–µ—Ä–∞—Ü–∏—è_–∫–í—Ç—á"].sum()
    avg_generation = df["–ì–µ–Ω–µ—Ä–∞—Ü–∏—è_–∫–í—Ç—á"].mean()
    max_month = df.loc[df["–ì–µ–Ω–µ—Ä–∞—Ü–∏—è_–∫–í—Ç—á"].idxmax(), "month"]
    min_month = df.loc[df["–ì–µ–Ω–µ—Ä–∞—Ü–∏—è_–∫–í—Ç—á"].idxmin(), "month"]
    
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        st.metric("–û–±—â–∞—è –≥–æ–¥–æ–≤–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è", f"{total_generation:.0f} –∫–í—Ç¬∑—á")
    with col2:
        st.metric("–°—Ä–µ–¥–Ω—è—è –º–µ—Å—è—á–Ω–∞—è", f"{avg_generation:.0f} –∫–í—Ç¬∑—á")
    with col3:
        st.metric("–õ—É—á—à–∏–π –º–µ—Å—è—Ü", f"{max_month}")
    with col4:
        st.metric("–•—É–¥—à–∏–π –º–µ—Å—è—Ü", f"{min_month}")
    
    # ===== –ì–†–ê–§–ò–ö –ò –¢–ê–ë–õ–ò–¶–ê =====
    col_chart, col_table = st.columns([2, 1])
    
    with col_chart:
        st.subheader("üìà –î–∏–Ω–∞–º–∏–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏")
        
        fig, ax = plt.subplots(figsize=(10, 6))
        
        # –ì—Ä–∞—Ñ–∏–∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        bars = ax.bar(df["month"], df["–ì–µ–Ω–µ—Ä–∞—Ü–∏—è_–∫–í—Ç—á"], 
                     color=plt.cm.viridis(df["–ì–µ–Ω–µ—Ä–∞—Ü–∏—è_–∫–í—Ç—á"] / df["–ì–µ–Ω–µ—Ä–∞—Ü–∏—è_–∫–í—Ç—á"].max()),
                     alpha=0.7)
        
        # –õ–∏–Ω–∏—è —Ç—Ä–µ–Ω–¥–∞
        ax.plot(df["month"], df["–ì–µ–Ω–µ—Ä–∞—Ü–∏—è_–∫–í—Ç—á"], 'r-', alpha=0.5, linewidth=2)
        
        ax.set_ylabel("–í—ã—Ä–∞–±–æ—Ç–∫–∞ (–∫–í—Ç¬∑—á/–º–µ—Å)")
        ax.set_title(f"–ì–µ–Ω–µ—Ä–∞—Ü–∏—è: {direction}, –Ω–∞–∫–ª–æ–Ω {tilt}¬∞, {peak_power} –∫–í—Ç")
        ax.grid(True, alpha=0.3)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞ —Å—Ç–æ–ª–±—Ü—ã
        for bar in bars:
            height = bar.get_height()
            ax.text(bar.get_x() + bar.get_width()/2., height,
                   f'{height:.0f}', ha='center', va='bottom')
        
        st.pyplot(fig)
    
    with col_table:
        st.subheader("üìã –î–∞–Ω–Ω—ã–µ –ø–æ –º–µ—Å—è—Ü–∞–º")
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–∞–±–ª–∏—Ü—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        display_df = df.copy()
        display_df["–ì–µ–Ω–µ—Ä–∞—Ü–∏—è_–∫–í—Ç—á"] = display_df["–ì–µ–Ω–µ—Ä–∞—Ü–∏—è_–∫–í—Ç—á"].round(1)
        display_df["–°–æ–ª–Ω–µ—á–Ω–∞—è_—Ä–∞–¥–∏–∞—Ü–∏—è"] = display_df["–°–æ–ª–Ω–µ—á–Ω–∞—è_—Ä–∞–¥–∏–∞—Ü–∏—è"].round(1)
        
        st.dataframe(display_df, use_container_width=True)
    
    # ===== –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø =====
    with st.expander("üìä –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"):
        col1, col2 = st.columns(2)
        
        with col1:
            st.write("**–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:**")
            st.write(f"- –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è: {df['–ì–µ–Ω–µ—Ä–∞—Ü–∏—è_–∫–í—Ç—á'].max():.1f} –∫–í—Ç¬∑—á")
            st.write(f"- –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è: {df['–ì–µ–Ω–µ—Ä–∞—Ü–∏—è_–∫–í—Ç—á'].min():.1f} –∫–í—Ç¬∑—á")
            st.write(f"- –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ: {df['–ì–µ–Ω–µ—Ä–∞—Ü–∏—è_–∫–í—Ç—á'].std():.1f} –∫–í—Ç¬∑—á")
            
        with col2:
            st.write("**–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Å–∏—Å—Ç–µ–º—ã:**")
            efficiency = (total_generation / (peak_power * 365)) * 100
            st.write(f"- –°—Ä–µ–¥–Ω–∏–π –ö–ü–î: {efficiency:.1f}%")
            st.write(f"- –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è: {(total_generation / (peak_power * 8760)) * 100:.1f}%")
    
else:
    st.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ—Ç PVGIS. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É.")

# ===== –§–£–¢–ï–† =====
st.markdown("---")
st.markdown("*–î–∞–Ω–Ω—ã–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã PVGIS API*")
