import streamlit as st
import requests
import pandas as pd
import matplotlib.pyplot as plt
import folium
from streamlit_folium import st_folium
import math
import numpy as np
from datetime import datetime, timedelta

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(layout="wide", page_title="‚òÄÔ∏è –°–æ–ª–Ω–µ—á–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è")
st.title("‚òÄÔ∏è –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —Å–æ–ª–Ω–µ—á–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏")

# ===== –ö–≠–®–ò–†–û–í–ê–ù–ò–ï –î–ê–ù–ù–´–• =====
@st.cache_data(ttl=3600)  # –ö—ç—à –Ω–∞ 1 —á–∞—Å
def get_pvgis_data(lat, lon, tilt, peak_power, azimuth, start_year=2020, end_year=2020):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ—Ç PVGIS API —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
    url = (
        f"https://re.jrc.ec.europa.eu/api/v5_2/seriescalc?"
        f"lat={lat}&lon={lon}&peakpower={peak_power}&loss=14&angle={tilt}&azimuth={azimuth}"
        f"&startyear={start_year}&endyear={end_year}&outputformat=json"
    )
    try:
        response = requests.get(url, timeout=20)
        if response.status_code == 200:
            return response.json()
        else:
            st.error(f"–û—à–∏–±–∫–∞ PVGIS API: {response.status_code}")
            return None
    except requests.exceptions.RequestException as e:
        st.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ PVGIS: {e}")
        return None

# ===== –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –°–ï–°–°–ò–ò =====
if 'lat' not in st.session_state:
    st.session_state.lat = 49.5883  # –ü–æ–ª—Ç–∞–≤–∞
if 'lon' not in st.session_state:
    st.session_state.lon = 34.5514  # –ü–æ–ª—Ç–∞–≤–∞

# ===== –°–ò–î–ï–ë–ê–† - –ü–ê–†–ê–ú–ï–¢–†–´ –°–ò–°–¢–ï–ú–´ =====
st.sidebar.header("üìç –õ–æ–∫–∞—Ü–∏—è –∏ –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—è –ø–∞–Ω–µ–ª–µ–π")

# –ë—ã—Å—Ç—Ä—ã–π –≤—ã–±–æ—Ä –≥–æ—Ä–æ–¥–æ–≤
cities = {
    "–ü–æ–ª—Ç–∞–≤–∞": (49.5883, 34.5514),
    "–ö–∏–µ–≤": (50.4500, 30.5233),
    "–õ—å–≤–æ–≤": (49.8425, 24.0322),
    "–û–¥–µ—Å—Å–∞": (46.4825, 30.7233),
    "–•–∞—Ä—å–∫–æ–≤": (49.9935, 36.2304),
    "–î–Ω–µ–ø—Ä": (48.4647, 35.0462)
}

# –ö–Ω–æ–ø–∫–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –≥–æ—Ä–æ–¥–∞
selected_city = st.sidebar.selectbox("–ë—ã—Å—Ç—Ä—ã–π –≤—ã–±–æ—Ä –≥–æ—Ä–æ–¥–∞:", list(cities.keys()))
if st.sidebar.button("–ü—Ä–∏–º–µ–Ω–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–π –≥–æ—Ä–æ–¥"):
    st.session_state.lat, st.session_state.lon = cities[selected_city]
    st.rerun()

st.sidebar.markdown("---")
st.sidebar.write("**–ò–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –Ω–∞ –∫–∞—Ä—Ç–µ:**")
st.sidebar.info("üó∫Ô∏è –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–∞—Ä—Ç—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è")

# –¢–µ–∫—É—â–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤ —Å–∞–π–¥–±–∞—Ä–µ
st.sidebar.write("**–¢–µ–∫—É—â–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã:**")
st.sidebar.success(f"–®–∏—Ä–æ—Ç–∞: {st.session_state.lat:.6f}")
st.sidebar.success(f"–î–æ–ª–≥–æ—Ç–∞: {st.session_state.lon:.6f}")

# –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Å–±—Ä–æ—Å–∞ –∫ –ü–æ–ª—Ç–∞–≤–µ
if st.sidebar.button("üîÑ –°–±—Ä–æ—Å–∏—Ç—å –∫ –ü–æ–ª—Ç–∞–≤–µ"):
    st.session_state.lat = 49.5883
    st.session_state.lon = 34.5514
    st.rerun()

st.sidebar.markdown("---")

# –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–∞–Ω–µ–ª–µ–π - –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ï –ó–ù–ê–ß–ï–ù–ò–Ø –ê–ó–ò–ú–£–¢–ê
directions = {
    "–°–µ–≤–µ—Ä": 0,
    "–°–µ–≤–µ—Ä–æ-–í–æ—Å—Ç–æ–∫": 45,
    "–í–æ—Å—Ç–æ–∫": 90,
    "–Æ–≥–æ-–í–æ—Å—Ç–æ–∫": 135,
    "–Æ–≥": 180,
    "–Æ–≥–æ-–ó–∞–ø–∞–¥": 225,
    "–ó–∞–ø–∞–¥": 270,
    "–°–µ–≤–µ—Ä–æ-–ó–∞–ø–∞–¥": 315
}

direction = st.sidebar.selectbox("–û—Ä–∏–µ–Ω—Ç–∞—Ü–∏—è –ø–∞–Ω–µ–ª–∏:", list(directions.keys()))
azimuth = directions[direction]

# –£–≥–æ–ª –Ω–∞–∫–ª–æ–Ω–∞ —Å –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–∫–∞–º–∏
tilt_presets = {
    "–û–ø—Ç–∏–º–∞–ª—å–Ω—ã–π (—à–∏—Ä–æ—Ç–∞)": round(st.session_state.lat),
    "–ü–ª–æ—Å–∫–∞—è (0¬∞)": 0,
    "–ü–æ–ª–æ–≥–∞—è (15¬∞)": 15,
    "–°—Ä–µ–¥–Ω—è—è (30¬∞)": 30,
    "–ö—Ä—É—Ç–∞—è (45¬∞)": 45,
    "–í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–∞—è (90¬∞)": 90
}

tilt_preset = st.sidebar.selectbox("–ü—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∫–ª–æ–Ω–∞:", list(tilt_presets.keys()))
tilt = st.sidebar.slider("–¢–æ—á–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —É–≥–ª–∞ –Ω–∞–∫–ª–æ–Ω–∞ (¬∞)", 0, 90, tilt_presets[tilt_preset])

# –ú–æ—â–Ω–æ—Å—Ç—å —Å–∏—Å—Ç–µ–º—ã
peak_power = st.sidebar.slider("–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –º–æ—â–Ω–æ—Å—Ç—å —Å–∏—Å—Ç–µ–º—ã (–∫–í—Ç)", 1.0, 100.0, 5.0, 0.1)

# ===== –í–´–ë–û–† –ì–û–î–ê –î–ê–ù–ù–´–• =====
st.sidebar.header("üìÖ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–∞–Ω–Ω—ã—Ö")

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≥–æ–¥—ã
available_years = list(range(2005, 2021))
selected_year = st.sidebar.selectbox(
    "–ì–æ–¥ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞:",
    options=available_years,
    index=available_years.index(2020)
)

if selected_year < 2015:
    st.sidebar.warning("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è 2015-2020 –≥–æ–¥—ã.")

# ===== –ò–ù–¢–ï–†–ê–ö–¢–ò–í–ù–ê–Ø –ö–ê–†–¢–ê –° –û–†–ò–ï–ù–¢–ê–¶–ò–ï–ô –ü–ê–ù–ï–õ–ï–ô =====
st.header("üó∫Ô∏è –ö–∞—Ä—Ç–∞ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è –∏ –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–∏ –ø–∞–Ω–µ–ª–µ–π")

# –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç—É
m = folium.Map(
    location=[st.session_state.lat, st.session_state.lon], 
    zoom_start=15,
    control_scale=True
)

# –î–æ–±–∞–≤–ª—è–µ–º –∫—Ä–∞—Å–Ω—ã–π –º–∞—Ä–∫–µ—Ä —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è
folium.Marker(
    [st.session_state.lat, st.session_state.lon],
    icon=folium.Icon(color="red", icon="circle", prefix="fa")
).add_to(m)

# –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –†–ê–°–ß–ï–¢: –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è –∫–∞—Ä—Ç—ã
# –í PVGIS –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å–∏—Å—Ç–µ–º–∞: 0¬∞ = –°–µ–≤–µ—Ä, 90¬∞ = –í–æ—Å—Ç–æ–∫, 180¬∞ = –Æ–≥, 270¬∞ = –ó–∞–ø–∞–¥
# –ù–æ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç—Ä–µ–ª–∫–∏ –Ω–∞ –∫–∞—Ä—Ç–µ –Ω—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–µ –∂–µ –∑–Ω–∞—á–µ–Ω–∏—è
angle_rad = math.radians(azimuth)
lat_offset = round(0.001 * math.cos(angle_rad), 6)
lon_offset = round(0.001 * math.sin(angle_rad), 6)

# –ö–æ–Ω–µ—á–Ω–∞—è —Ç–æ—á–∫–∞ –¥–ª—è —Å—Ç—Ä–µ–ª–∫–∏
end_lat = st.session_state.lat + lat_offset
end_lon = st.session_state.lon + lon_offset

# –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–µ–ª–∫—É —Å —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–æ–º –Ω–∞ –∫–æ–Ω—Ü–µ
arrow_coordinates = [
    [st.session_state.lat, st.session_state.lon],
    [end_lat, end_lon]
]

# –û—Å–Ω–æ–≤–Ω–∞—è –ª–∏–Ω–∏—è —Å—Ç—Ä–µ–ª–∫–∏
folium.PolyLine(
    locations=arrow_coordinates,
    color="blue",
    weight=4,
    opacity=0.8
).add_to(m)

# –î–æ–±–∞–≤–ª—è–µ–º —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫-—Å—Ç—Ä–µ–ª–∫—É –Ω–∞ –∫–æ–Ω—Ü–µ
def create_arrowhead(start_lat, start_lon, end_lat, end_lon, size=0.0001):
    """–°–æ–∑–¥–∞–µ—Ç —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫-—Å—Ç—Ä–µ–ª–∫—É –Ω–∞ –∫–æ–Ω—Ü–µ –ª–∏–Ω–∏–∏ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏"""
    # –£–≥–æ–ª –æ—Ç –Ω–∞—á–∞–ª—å–Ω–æ–π —Ç–æ—á–∫–∏ –∫ –∫–æ–Ω–µ—á–Ω–æ–π
    angle = math.atan2(end_lon - start_lon, end_lat - start_lat)
    
    # –¢–æ—á–∫–∏ —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–∞ (—Å—Ç—Ä–µ–ª–∫–∞ —É–∫–∞–∑—ã–≤–∞–µ—Ç –û–¢ –Ω–∞—á–∞–ª—å–Ω–æ–π —Ç–æ—á–∫–∏ –ö –∫–æ–Ω–µ—á–Ω–æ–π)
    p1_lat = end_lat
    p1_lon = end_lon
    
    p2_lat = end_lat - size * math.cos(angle - math.pi/6)
    p2_lon = end_lon - size * math.sin(angle - math.pi/6)
    
    p3_lat = end_lat - size * math.cos(angle + math.pi/6)
    p3_lon = end_lon - size * math.sin(angle + math.pi/6)
    
    return [[p1_lat, p1_lon], [p2_lat, p2_lon], [p3_lat, p3_lon], [p1_lat, p1_lon]]

# –°–æ–∑–¥–∞–µ–º –∏ –¥–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–µ–ª–∫—É
arrowhead_coords = create_arrowhead(
    st.session_state.lat, st.session_state.lon, 
    end_lat, end_lon
)

# –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ª–∏–≤–∫—É –¥–ª—è —Å—Ç—Ä–µ–ª–∫–∏
folium.Polygon(
    locations=arrowhead_coords,
    color="blue",
    weight=2,
    opacity=0.8,
    fill=True,
    fill_color="blue",
    fill_opacity=0.8
).add_to(m)

# –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∫–∞—Ä—Ç—É –∏ –ø–æ–ª—É—á–∞–µ–º —Å–æ–±—ã—Ç–∏—è
map_data = st_folium(
    m, 
    width=800, 
    height=500,
    key="main_map"
)

# –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–ª–∏–∫ –ø–æ –∫–∞—Ä—Ç–µ
if map_data and map_data.get("last_clicked"):
    clicked_lat = map_data["last_clicked"]["lat"]
    clicked_lon = map_data["last_clicked"]["lng"]
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤ session state
    st.session_state.lat = clicked_lat
    st.session_state.lon = clicked_lon
    st.rerun()

# –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–∏ –∏ –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–∏
col1, col2, col3, col4 = st.columns(4)
with col1:
    st.info(f"**–®–∏—Ä–æ—Ç–∞:** {st.session_state.lat:.6f}")
with col2:
    st.info(f"**–î–æ–ª–≥–æ—Ç–∞:** {st.session_state.lon:.6f}")
with col3:
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –±–ª–∏–∂–∞–π—à–∏–π –≥–æ—Ä–æ–¥
    min_distance = float('inf')
    nearest_city = "–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω"
    for city, (city_lat, city_lon) in cities.items():
        distance = math.sqrt((st.session_state.lat - city_lat)**2 + (st.session_state.lon - city_lon)**2)
        if distance < min_distance:
            min_distance = distance
            nearest_city = city
    st.info(f"**–ë–ª–∏–∂–∞–π—à–∏–π –≥–æ—Ä–æ–¥:** {nearest_city}")
with col4:
    st.info(f"**–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:** {direction}")

# ===== –ò–ù–î–ò–ö–ê–¢–û–† –ó–ê–ì–†–£–ó–ö–ò =====
st.header("‚ö° –†–∞—Å—á–µ—Ç —Å–æ–ª–Ω–µ—á–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏")

with st.spinner(f"–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—á–∞—Å–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∑–∞ {selected_year} –≥–æ–¥ –æ—Ç PVGIS..."):
    data = get_pvgis_data(st.session_state.lat, st.session_state.lon, tilt, peak_power, azimuth, selected_year, selected_year)

# ===== –û–ë–†–ê–ë–û–¢–ö–ê –î–ê–ù–ù–´–• =====
def parse_pvgis_hourly_data(data, selected_year):
    """–ü–∞—Ä—Å–∏–Ω–≥ –ø–æ—á–∞—Å–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö PVGIS"""
    if not data or "outputs" not in data:
        return None
    
    hourly_data = data["outputs"]["hourly"]
    df = pd.DataFrame(hourly_data)
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤—Ä–µ–º—è
    df['time'] = pd.to_datetime(df['time'], format='%Y%m%d:%H%M')
    df['date'] = df['time'].dt.date
    df['month'] = df['time'].dt.month
    df['week'] = df['time'].dt.isocalendar().week
    df['hour'] = df['time'].dt.hour
    df['day_of_year'] = df['time'].dt.dayofyear
    df['year'] = df['time'].dt.year
    
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —ç–Ω–µ—Ä–≥–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–æ–ª–Ω–µ—á–Ω–æ–π —Ä–∞–¥–∏–∞—Ü–∏–∏
    system_efficiency = 0.16  # 16% –ö–ü–î —Å–∏—Å—Ç–µ–º—ã
    panel_area = peak_power * 6.5  # –º¬≤
    
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤ –í—Ç¬∑—á –∑–∞ —á–∞—Å –∏ –∫–í—Ç¬∑—á –∑–∞ —á–∞—Å
    df['power_wh'] = df['G(i)'] * panel_area * system_efficiency
    df['power_kwh'] = df['power_wh'] / 1000
    
    return df

def calculate_periods_generation(df, peak_power):
    """–†–∞—Å—á–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∑–∞ —Ä–∞–∑–Ω—ã–µ –ø–µ—Ä–∏–æ–¥—ã"""
    if df is None:
        return None
    
    # –ü–æ—á–∞—Å–æ–≤–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è
    hourly = df.groupby(['date', 'hour']).agg({
        'power_kwh': 'sum',
        'G(i)': 'mean',
        'T2m': 'mean'
    }).reset_index()
    
    # –î–Ω–µ–≤–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è
    daily = df.groupby('date').agg({
        'power_kwh': 'sum',
        'G(i)': 'mean',
        'T2m': 'mean'
    }).reset_index()
    
    # –ù–µ–¥–µ–ª—å–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è
    weekly = df.groupby('week').agg({
        'power_kwh': 'sum',
        'G(i)': 'mean',
        'T2m': 'mean'
    }).reset_index()
    
    # –ú–µ—Å—è—á–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è
    monthly = df.groupby('month').agg({
        'power_kwh': 'sum',
        'G(i)': 'mean',
        'T2m': 'mean'
    }).reset_index()
    
    # –ì–æ–¥–æ–≤–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è
    yearly_total = df['power_kwh'].sum()
    
    # –°—Ä–µ–¥–Ω–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
    avg_hourly = df['power_kwh'].mean()
    avg_daily = daily['power_kwh'].mean()
    avg_weekly = weekly['power_kwh'].mean()
    avg_monthly = monthly['power_kwh'].mean()
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ä–∞–¥–∏–∞—Ü–∏–∏
    avg_radiation = df['G(i)'].mean()
    max_radiation = df['G(i)'].max()
    
    return {
        'hourly': hourly,
        'daily': daily,
        'weekly': weekly,
        'monthly': monthly,
        'yearly_total': yearly_total,
        'avg_hourly': avg_hourly,
        'avg_daily': avg_daily,
        'avg_weekly': avg_weekly,
        'avg_monthly': avg_monthly,
        'avg_radiation': avg_radiation,
        'max_radiation': max_radiation,
        'raw_data': df,
        'data_year': df['year'].iloc[0] if len(df) > 0 else selected_year
    }

# –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ
df_hourly = parse_pvgis_hourly_data(data, selected_year) if data else None

# –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –≤ —Å–∞–π–¥–±–∞—Ä–µ
if df_hourly is not None:
    st.sidebar.success(f"‚úÖ –î–∞–Ω–Ω—ã–µ –∑–∞ {selected_year} –≥–æ–¥ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
    st.sidebar.write(f"üìä –ó–∞–ø–∏—Å–µ–π: {len(df_hourly)} —Å—Ç—Ä–æ–∫")
else:
    st.sidebar.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")

periods_data = calculate_periods_generation(df_hourly, peak_power) if df_hourly is not None else None

# ===== –û–¢–û–ë–†–ê–ñ–ï–ù–ò–ï –†–ï–ó–£–õ–¨–¢–ê–¢–û–í =====
if periods_data is not None:
    # ===== –°–í–û–î–ö–ê –ü–û–ö–ê–ó–ê–¢–ï–õ–ï–ô =====
    st.header("üìä –°–≤–æ–¥–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏")
    
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        st.metric("–ì–æ–¥–æ–≤–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è", f"{periods_data['yearly_total']:.0f} –∫–í—Ç¬∑—á")
        st.metric("–°—Ä–µ–¥–Ω—è—è –º–µ—Å—è—á–Ω–∞—è", f"{periods_data['avg_monthly']:.0f} –∫–í—Ç¬∑—á")
    
    with col2:
        st.metric("–°—Ä–µ–¥–Ω—è—è –Ω–µ–¥–µ–ª—å–Ω–∞—è", f"{periods_data['avg_weekly']:.0f} –∫–í—Ç¬∑—á")
        st.metric("–°—Ä–µ–¥–Ω—è—è –¥–Ω–µ–≤–Ω–∞—è", f"{periods_data['avg_daily']:.1f} –∫–í—Ç¬∑—á")
    
    with col3:
        st.metric("–°—Ä–µ–¥–Ω—è—è —á–∞—Å–æ–≤–∞—è", f"{periods_data['avg_hourly']:.2f} –∫–í—Ç¬∑—á")
        daily_yield = periods_data['yearly_total'] / 365
        st.metric("–î–Ω–µ–≤–Ω–æ–π yield", f"{daily_yield:.1f} –∫–í—Ç¬∑—á/–¥–µ–Ω—å")
    
    with col4:
        capacity_factor = (periods_data['yearly_total'] / (peak_power * 8760)) * 100
        st.metric("–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è", f"{capacity_factor:.1f}%")
        specific_generation = periods_data['yearly_total'] / peak_power
        st.metric("–£–¥–µ–ª—å–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è", f"{specific_generation:.0f} –∫–í—Ç¬∑—á/–∫–í—Ç")
    
    # ===== –í–ö–õ–ê–î–ö–ò –î–õ–Ø –†–ê–ó–ù–´–• –ü–ï–†–ò–û–î–û–í =====
    st.header("üìà –î–µ—Ç–∞–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞")
    
    tab1, tab2, tab3, tab4 = st.tabs(["üèÜ –ì–û–î–û–í–ê–Ø", "üìÖ –ú–ï–°–Ø–ß–ù–ê–Ø", "üìÜ –ù–ï–î–ï–õ–¨–ù–ê–Ø", "‚è∞ –°–£–¢–û–ß–ù–ê–Ø"])
    
    with tab1:
        st.subheader(f"–ì–æ–¥–æ–≤–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è - {selected_year} –≥–æ–¥")
        
        fig_year, (ax1, ax2) = plt.subplots(1, 2, figsize=(15, 5))
        
        months_ru = ["–Ø–Ω–≤", "–§–µ–≤", "–ú–∞—Ä", "–ê–ø—Ä", "–ú–∞–π", "–ò—é–Ω", 
                    "–ò—é–ª", "–ê–≤–≥", "–°–µ–Ω", "–û–∫—Ç", "–ù–æ—è", "–î–µ–∫"]
        
        monthly_data = periods_data['monthly'].copy()
        monthly_data['month_name'] = [months_ru[i-1] for i in monthly_data['month']]
        
        bars = ax1.bar(monthly_data['month_name'], monthly_data['power_kwh'], 
                      color=plt.cm.viridis(np.linspace(0, 1, 12)),
                      alpha=0.7)
        
        ax1.set_title(f'–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ –º–µ—Å—è—Ü–∞–º - {selected_year} –≥–æ–¥')
        ax1.set_ylabel('–∫–í—Ç¬∑—á')
        ax1.grid(True, alpha=0.3)
        plt.xticks(rotation=45)
        
        for bar in bars:
            height = bar.get_height()
            ax1.text(bar.get_x() + bar.get_width()/2., height + 5,
                    f'{height:.0f}', ha='center', va='bottom', fontsize=9)
        
        # –ö—Ä—É–≥–æ–≤–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞
        seasons = {
            '–ó–∏–º–∞ (–î–µ–∫-–§–µ–≤)': monthly_data[monthly_data['month'].isin([12, 1, 2])]['power_kwh'].sum(),
            '–í–µ—Å–Ω–∞ (–ú–∞—Ä-–ú–∞–π)': monthly_data[monthly_data['month'].isin([3, 4, 5])]['power_kwh'].sum(),
            '–õ–µ—Ç–æ (–ò—é–Ω-–ê–≤–≥)': monthly_data[monthly_data['month'].isin([6, 7, 8])]['power_kwh'].sum(),
            '–û—Å–µ–Ω—å (–°–µ–Ω-–ù–æ—è)': monthly_data[monthly_data['month'].isin([9, 10, 11])]['power_kwh'].sum()
        }
        
        ax2.pie(seasons.values(), labels=seasons.keys(), autopct='%1.1f%%', 
                colors=['#ff9999', '#66b3ff', '#99ff99', '#ffcc99'])
        ax2.set_title(f'–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Å–µ–∑–æ–Ω–∞–º - {selected_year} –≥–æ–¥')
        
        plt.tight_layout()
        st.pyplot(fig_year)
        
        # –¢–∞–±–ª–∏—Ü–∞ –≥–æ–¥–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        display_monthly = monthly_data[['month_name', 'power_kwh', 'G(i)']].rename(
            columns={
                'month_name': '–ú–µ—Å—è—Ü', 
                'power_kwh': '–ì–µ–Ω–µ—Ä–∞—Ü–∏—è (–∫–í—Ç¬∑—á)',
                'G(i)': '–°—Ä–µ–¥–Ω—è—è —Ä–∞–¥–∏–∞—Ü–∏—è (–í—Ç/–º¬≤)'
            }
        )
        st.dataframe(display_monthly, hide_index=True, use_container_width=True)
    
    with tab2:
        st.subheader(f"–ú–µ—Å—è—á–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è - {selected_year} –≥–æ–¥")
        
        # –í—ã–±–æ—Ä –º–µ—Å—è—Ü–∞ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
        selected_month = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—è—Ü:", months_ru, key="month_selector")
        month_num = months_ru.index(selected_month) + 1
        
        # –î–∞–Ω–Ω—ã–µ –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –º–µ—Å—è—Ü
        month_data = periods_data['raw_data'][periods_data['raw_data']['month'] == month_num]
        daily_month = month_data.groupby('date').agg({
            'power_kwh': 'sum',
            'G(i)': 'mean'
        }).reset_index()
        
        fig_month, (ax1, ax2) = plt.subplots(1, 2, figsize=(15, 5))
        
        # –î–Ω–µ–≤–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –≤ –º–µ—Å—è—Ü–µ
        ax1.plot(daily_month['date'], daily_month['power_kwh'], 'o-', linewidth=2, markersize=4, color='blue')
        ax1.set_title(f'–î–Ω–µ–≤–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è - {selected_month} {selected_year}')
        ax1.set_ylabel('–∫–í—Ç¬∑—á/–¥–µ–Ω—å')
        ax1.grid(True, alpha=0.3)
        ax1.tick_params(axis='x', rotation=45)
        
        # –°—Ä–µ–¥–Ω—è—è —á–∞—Å–æ–≤–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ –¥–Ω—è–º –º–µ—Å—è—Ü–∞
        hourly_avg = month_data.groupby('hour').agg({
            'power_kwh': 'mean',
            'G(i)': 'mean'
        }).reset_index()
        
        ax2.bar(hourly_avg['hour'], hourly_avg['power_kwh'], alpha=0.7, color='orange')
        ax2.set_title(f'–°—Ä–µ–¥–Ω—è—è —á–∞—Å–æ–≤–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è - {selected_month} {selected_year}')
        ax2.set_xlabel('–ß–∞—Å –¥–Ω—è')
        ax2.set_ylabel('–∫–í—Ç¬∑—á/—á–∞—Å')
        ax2.grid(True, alpha=0.3)
        
        plt.tight_layout()
        st.pyplot(fig_month)
        
        col1, col2 = st.columns(2)
        with col1:
            st.metric(f"–û–±—â–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞ {selected_month}", f"{daily_month['power_kwh'].sum():.0f} –∫–í—Ç¬∑—á")
        with col2:
            st.metric(f"–°—Ä–µ–¥–Ω—è—è –¥–Ω–µ–≤–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è", f"{daily_month['power_kwh'].mean():.1f} –∫–í—Ç¬∑—á")
    
    with tab3:
        st.subheader(f"–ù–µ–¥–µ–ª—å–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è - {selected_year} –≥–æ–¥")
        
        fig_week, ax = plt.subplots(figsize=(12, 6))
        
        weekly_data = periods_data['weekly'].copy()
        
        ax.bar(weekly_data['week'], weekly_data['power_kwh'], alpha=0.7, color='green')
        ax.set_title(f'–ù–µ–¥–µ–ª—å–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è - {selected_year} –≥–æ–¥')
        ax.set_xlabel('–ù–æ–º–µ—Ä –Ω–µ–¥–µ–ª–∏')
        ax.set_ylabel('–∫–í—Ç¬∑—á/–Ω–µ–¥–µ–ª—é')
        ax.grid(True, alpha=0.3)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ª–∏–Ω–∏—é —Ç—Ä–µ–Ω–¥–∞
        z = np.polyfit(weekly_data['week'], weekly_data['power_kwh'], 2)
        p = np.poly1d(z)
        ax.plot(weekly_data['week'], p(weekly_data['week']), "r--", alpha=0.8, linewidth=2)
        
        plt.tight_layout()
        st.pyplot(fig_week)
        
        col1, col2, col3 = st.columns(3)
        with col1:
            st.metric("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –Ω–µ–¥–µ–ª—è", f"{weekly_data['power_kwh'].max():.0f} –∫–í—Ç¬∑—á")
        with col2:
            st.metric("–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –Ω–µ–¥–µ–ª—è", f"{weekly_data['power_kwh'].min():.0f} –∫–í—Ç¬∑—á")
        with col3:
            st.metric("–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ", f"{weekly_data['power_kwh'].std():.0f} –∫–í—Ç¬∑—á")
    
    with tab4:
        st.subheader(f"–°—É—Ç–æ—á–Ω–∞—è –∏ –ø–æ—á–∞—Å–æ–≤–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è - {selected_year} –≥–æ–¥")
        
        # –í—ã–±–æ—Ä –¥–Ω—è –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
        available_dates = periods_data['daily']['date'].unique()
        if len(available_dates) > 0:
            selected_date = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:", available_dates[:10])
            
            # –î–∞–Ω–Ω—ã–µ –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –¥–µ–Ω—å
            day_data = periods_data['raw_data'][periods_data['raw_data']['date'] == selected_date]
            
            fig_day, (ax1, ax2) = plt.subplots(1, 2, figsize=(15, 5))
            
            # –ü–æ—á–∞—Å–æ–≤–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è
            ax1.bar(day_data['hour'], day_data['power_kwh'], alpha=0.7, color='red')
            ax1.set_title(f'–ü–æ—á–∞—Å–æ–≤–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è - {selected_date}')
            ax1.set_xlabel('–ß–∞—Å –¥–Ω—è')
            ax1.set_ylabel('–∫–í—Ç¬∑—á/—á–∞—Å')
            ax1.grid(True, alpha=0.3)
            
            # –ù–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞ –¥–µ–Ω—å
            cumulative = day_data['power_kwh'].cumsum()
            ax2.plot(day_data['hour'], cumulative, 'o-', linewidth=2, color='purple', markersize=4)
            ax2.set_title(f'–ù–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è - {selected_date}')
            ax2.set_xlabel('–ß–∞—Å –¥–Ω—è')
            ax2.set_ylabel('–∫–í—Ç¬∑—á (–Ω–∞–∫–æ–ø–∏—Ç.)')
            ax2.grid(True, alpha=0.3)
            ax2.fill_between(day_data['hour'], cumulative, alpha=0.3, color='purple')
            
            plt.tight_layout()
            st.pyplot(fig_day)
            
            total_day = day_data['power_kwh'].sum()
            if len(day_data) > 0:
                peak_hour = day_data.loc[day_data['power_kwh'].idxmax()]
                
                col1, col2, col3 = st.columns(3)
                with col1:
                    st.metric("–û–±—â–∞—è –¥–Ω–µ–≤–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è", f"{total_day:.1f} –∫–í—Ç¬∑—á")
                with col2:
                    st.metric("–ü–∏–∫–æ–≤—ã–π —á–∞—Å", f"–ß–∞—Å {int(peak_hour['hour'])}:00")
                with col3:
                    st.metric("–ü–∏–∫–æ–≤–∞—è –º–æ—â–Ω–æ—Å—Ç—å", f"{peak_hour['power_kwh']:.2f} –∫–í—Ç¬∑—á")

else:
    st.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ—Ç PVGIS. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É.")

# ===== –§–£–¢–ï–† =====
st.markdown("---")
st.markdown(f"*–î–∞–Ω–Ω—ã–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã PVGIS API ‚Ä¢ –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ: {st.session_state.lat:.6f}, {st.session_state.lon:.6f} ‚Ä¢ –ì–æ–¥ –¥–∞–Ω–Ω—ã—Ö: {selected_year}*")
